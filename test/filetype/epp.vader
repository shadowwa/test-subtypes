Execute (Setup default subtype to Undefined):
  Save g:epuppet_default_subtype
  if exists('g:epuppet_default_subtype')
    unlet g:epuppet_default_subtype
  end

Execute (Filetype detection on a new empty file):
  edit foo.epp
  AssertEqual &filetype, 'epuppet'
  " new is needed before bedelete https://github.com/junegunn/vader.vim/issues/134
  new
  " bdelete is needed otherwise g:epuppet_default_subtype is not reseted for the next tests
  bdelete foo.epp

# do we want it to match sh.epp as default or just epp?
Execute (epuppet test_with_leading_tag):
  edit test/test-files/test_with_leading_tag.epp
  AssertEqual &filetype, 'epuppet'
  new
  bdelete test/test-files/test_with_leading_tag.epp

Execute (Setting default subtype to 'sh'):
  let g:epuppet_default_subtype = 'sh'

Execute (Filetype detection on a new empty file):
  edit foo.epp
  AssertEqual &filetype, 'sh.epuppet'

# do we want it to match sh.epp as default or just epp?
Execute (epuppet test_with_leading_tag):
  edit test/test-files/test_with_leading_tag.epp
  AssertEqual &filetype, 'sh.epuppet'

Execute (Restore default subtype):
  Restore g:epuppet_default_subtype

Execute (epuppet perl with shebang):
  edit test/test-files/test_perl_with_shebang.epp
  AssertEqual &filetype, 'perl.epuppet'

# We don't need to parse the shebang for shell since sh is the default subtype
Execute (epuppet default to shell):
  edit test/test-files/test_shell_with_shebang.epp
  AssertEqual &filetype, 'sh.epuppet'

Execute (inner with extension):
  edit test/test-files/test.inner
  AssertEqual &filetype, 'inner'

Execute (epuppet inner with extension):
  edit test/test-files/test.inner.epp
  AssertEqual &filetype, 'inner.epuppet'

Execute (epuppet inner with double inner extension):
  edit test/test-files/test.inner.inner.epp
  AssertEqual &filetype, 'inner.epuppet'

Execute (epuppet inner with double epuppet extension):
  edit test/test-files/test.inner.epp.epp
  AssertEqual &filetype, 'inner.epuppet'

Execute (epuppet inner with reversed extension):
  edit test/test-files/test.epp.inner
  AssertEqual &filetype, 'inner'

Execute (epuppet outer inner chained with extension):
  edit test/test-files/test.inner.outer.epp
  AssertEqual &filetype, 'inner.outer.epuppet'

Execute (epuppet shell with extension):
  edit test/test-files/test_shell_with_extension.sh.epp
  AssertEqual &filetype, 'sh.epuppet'

Execute (epuppet yaml with extension):
  edit test/test-files/test.yml.epp
  AssertEqual &filetype, 'yaml.epuppet'

Execute (epuppet php with extension):
  edit test/test-files/test_php_with_extension.php.epp
  AssertEqual &filetype, 'php.epuppet'

Execute (epuppet apache conf with path and extension):
  edit test/test-files/etc/apache2/test.conf.epp
  AssertEqual &filetype, 'apache.epuppet'
